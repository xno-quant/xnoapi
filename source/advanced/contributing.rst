ƒê√≥ng g√≥p cho XNO
================

ü§ù ƒê√≥ng g√≥p
~~~~~~~~~~~

Ch√∫ng t√¥i hoan ngh√™nh m·ªçi ƒë√≥ng g√≥p t·ª´ c·ªông ƒë·ªìng! B·∫°n c√≥ th·ªÉ:

- ‚≠ê Star d·ª± √°n tr√™n GitHub
- üêõ B√°o c√°o l·ªói ho·∫∑c ƒë·ªÅ xu·∫•t t√≠nh nƒÉng
- üìù C·∫£i thi·ªán t√†i li·ªáu
- üíª ƒê√≥ng g√≥p code

üõ†Ô∏è C√°c c√°ch ƒë√≥ng g√≥p
-------------------

**1. B√°o c√°o Bug**

N·∫øu b·∫°n t√¨m th·∫•y bug, h√£y t·∫°o Issue tr√™n GitHub v·ªõi th√¥ng tin sau:

.. code-block:: text

   **Bug Description:**
   M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ bug
   
   **Steps to Reproduce:**
   1. B∆∞·ªõc 1
   2. B∆∞·ªõc 2
   3. K·∫øt qu·∫£ kh√¥ng mong mu·ªën
   
   **Expected Behavior:**
   K·∫øt qu·∫£ mong ƒë·ª£i
   
   **Environment:**
   - OS: Windows/Mac/Linux
   - Python version: 3.x
   - XNO API version: x.x.x
   
   **Code Sample:**
   ```python
   # Code ƒë·ªÉ reproduce bug
   ```

**2. ƒê·ªÅ xu·∫•t t√≠nh nƒÉng m·ªõi**

.. code-block:: text

   **Feature Request:**
   T√™n t√≠nh nƒÉng ƒë·ªÅ xu·∫•t
   
   **Problem Statement:**
   V·∫•n ƒë·ªÅ c·∫ßn gi·∫£i quy·∫øt
   
   **Proposed Solution:**
   Gi·∫£i ph√°p ƒë·ªÅ xu·∫•t
   
   **Use Case:**
   Tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng c·ª• th·ªÉ
   
   **Additional Context:**
   Th√¥ng tin b·ªï sung

**3. C·∫£i thi·ªán Documentation**

- S·ª≠a l·ªói ch√≠nh t·∫£ v√† grammar
- Th√™m v√≠ d·ª• code r√µ r√†ng
- C·∫≠p nh·∫≠t th√¥ng tin l·ªói th·ªùi
- D·ªãch documentation sang ng√¥n ng·ªØ kh√°c

**4. ƒê√≥ng g√≥p Code**

üìã Development Setup
~~~~~~~~~~~~~~~~~~~

**1. Fork v√† Clone Repository:**

.. code-block:: bash

   git clone https://github.com/xno-quant/xnoapi.git
   cd xnoapi

**2. T·∫°o Virtual Environment:**

.. code-block:: bash

   python -m venv venv
   source venv/bin/activate  # Linux/Mac
   venv\Scripts\activate     # Windows

**3. Install Dependencies:**

.. code-block:: bash

   pip install -e .
   pip install -r requirements-dev.txt

**4. T·∫°o Feature Branch:**

.. code-block:: bash

   git checkout -b feature/your-feature-name

üß™ Testing Guidelines
~~~~~~~~~~~~~~~~~~~~

**Ch·∫°y Tests:**

.. code-block:: bash

   # Ch·∫°y t·∫•t c·∫£ tests
   pytest
   
   # Ch·∫°y tests v·ªõi coverage
   pytest --cov=xnoapi
   
   # Ch·∫°y tests cho module c·ª• th·ªÉ
   pytest tests/test_stocks.py

**Vi·∫øt Tests M·ªõi:**

.. code-block:: python

   import pytest
   from xnoapi.vn.data import get_stock_hist
   
   def test_get_stock_hist():
       """Test l·∫•y d·ªØ li·ªáu l·ªãch s·ª≠ c·ªï phi·∫øu"""
       data = get_stock_hist("VIC", resolution='D')
       
       assert not data.empty
       assert 'Close' in data.columns
       assert 'Volume' in data.columns
       assert data['Close'].dtype in ['float64', 'int64']

üìù Code Style Guidelines
~~~~~~~~~~~~~~~~~~~~~~~

**1. Python Style:**

- S·ª≠ d·ª•ng PEP 8
- Type hints cho functions
- Docstrings cho classes v√† methods
- Meaningful variable names

.. code-block:: python

   def get_stock_data(symbol: str, start_date: str, end_date: str) -> pd.DataFrame:
       """
       L·∫•y d·ªØ li·ªáu c·ªï phi·∫øu trong kho·∫£ng th·ªùi gian.
       
       Args:
           symbol: M√£ c·ªï phi·∫øu
           start_date: Ng√†y b·∫Øt ƒë·∫ßu (YYYY-MM-DD)
           end_date: Ng√†y k·∫øt th√∫c (YYYY-MM-DD)
           
       Returns:
           DataFrame ch·ª©a d·ªØ li·ªáu OHLCV
           
       Raises:
           ValueError: N·∫øu symbol kh√¥ng h·ª£p l·ªá
       """
       pass

**2. Error Handling:**

.. code-block:: python

   try:
       data = api_call(symbol)
       if data.empty:
           raise ValueError(f"No data found for {symbol}")
       return data
   except requests.RequestException as e:
       logger.error(f"API request failed: {e}")
       raise
   except Exception as e:
       logger.error(f"Unexpected error: {e}")
       raise

**3. Logging:**

.. code-block:: python

   import logging
   
   logger = logging.getLogger(__name__)
   
   def fetch_data(symbol: str):
       logger.info(f"Fetching data for {symbol}")
       try:
           data = api_request(symbol)
           logger.info(f"Successfully fetched {len(data)} records")
           return data
       except Exception as e:
           logger.error(f"Failed to fetch data: {e}")
           raise

üîÑ Pull Request Process
~~~~~~~~~~~~~~~~~~~~~~

**1. Chu·∫©n b·ªã PR:**

.. code-block:: bash

   # ƒê·∫£m b·∫£o code ƒë√∫ng style
   black xnoapi/
   flake8 xnoapi/
   
   # Ch·∫°y tests
   pytest
   
   # Commit changes
   git add .
   git commit -m "feat: add new stock analysis feature"
   
   # Push to fork
   git push origin feature/your-feature-name

**2. T·∫°o Pull Request:**

- Title r√µ r√†ng v√† m√¥ t·∫£ t√≠nh nƒÉng
- Link ƒë·∫øn Issues li√™n quan
- Checklist c√°c items ƒë√£ ho√†n th√†nh
- Screenshots n·∫øu c√≥ UI changes

**3. PR Template:**

.. code-block:: text

   ## Description
   Brief description of changes
   
   ## Type of Change
   - [ ] Bug fix
   - [ ] New feature
   - [ ] Breaking change
   - [ ] Documentation update
   
   ## Testing
   - [ ] Tests pass locally
   - [ ] New tests added for new features
   - [ ] Manual testing completed
   
   ## Checklist
   - [ ] Code follows style guidelines
   - [ ] Self-review completed
   - [ ] Documentation updated
   - [ ] No breaking changes

üèÖ Recognition Program
~~~~~~~~~~~~~~~~~~~~~

**Contributor Levels:**

- **üå± First-time Contributor**: First merged PR
- **‚≠ê Regular Contributor**: 5+ merged PRs  
- **üöÄ Core Contributor**: 20+ merged PRs + major features
- **üëë Maintainer**: Long-term commitment + leadership

**Benefits:**

- T√™n trong CONTRIBUTORS.md
- Special Discord role v√† badge

üìà Impact Tracking
~~~~~~~~~~~~~~~~~

**Metrics ch√∫ng t√¥i theo d√µi:**

- Number of contributors
- Code quality improvements
- Bug fix rate
- Feature adoption rate
- Community growth
- User satisfaction

**Monthly Reports:**

- Top contributors recognition
- Feature usage statistics
- Community feedback summary
- Roadmap updates

üéØ Areas needing contribution
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**High Priority:**

1. **Performance Optimization**
   - Caching mechanisms
   - Async API calls
   - Memory usage optimization

2. **Testing Coverage**
   - Unit tests cho new features
   - Integration tests
   - Performance benchmarks

3. **Documentation**
   - API reference completion
   - Tutorial improvements
   - Translation to English

**Medium Priority:**

4. **New Features**
   - Additional technical indicators
   - More market data sources
   - Portfolio optimization tools

5. **Developer Experience**
   - Better error messages
   - IDE integration improvements
   - Debugging tools

**Low Priority:**

6. **Nice-to-have**
   - GUI applications
   - Mobile SDK
   - Additional language bindings

üöÄ Getting Started Tips
~~~~~~~~~~~~~~~~~~~~~~

**For New Contributors:**

1. Start with small issues labeled "good first issue"
2. Join our Discord for real-time help
3. Read existing code to understand patterns
4. Don't hesitate to ask questions
5. Focus on one thing at a time

**Best Practices:**

- Write tests for your code
- Keep PRs small and focused  
- Update documentation
- Be responsive to feedback
- Help review others' PRs