.. role:: raw-html-m2r(raw)
   :format: html


XNO API Library
===============

‚ö†Ô∏è **Ghi ch√∫**\ : T√†i li·ªáu n√†y b·∫Øt ƒë·∫ßu b·∫±ng Ti·∫øng Vi·ªát cho c·ªông ƒë·ªìng ƒë·ªãa ph∆∞∆°ng. üåê Phi√™n b·∫£n Ti·∫øng Anh c√≥ s·∫µn b√™n d∆∞·ªõi ‚Äî cu·ªôn xu·ªëng ho·∫∑c s·ª≠ d·ª•ng m·ª•c l·ª•c ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng.

Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi **XNO API**\ , th∆∞ vi·ªán Python to√†n di·ªán cho ph√¢n t√≠ch ƒë·ªãnh l∆∞·ª£ng v√† truy xu·∫•t d·ªØ li·ªáu t√†i ch√≠nh, ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a ƒë·∫∑c bi·ªát cho th·ªã tr∆∞·ªùng t√†i ch√≠nh Vi·ªát Nam.

V·ªõi s·ª© m·ªánh *"ƒê∆∞a c√¥ng c·ª• ph√¢n t√≠ch ƒë·ªãnh l∆∞·ª£ng ƒë·∫øn g·∫ßn h∆°n v·ªõi m·ªçi nh√† ƒë·∫ßu t∆∞ Vi·ªát Nam"*\ , XNO API li√™n t·ª•c ph√°t tri·ªÉn, t√≠ch h·ª£p nh·ªØng c√¥ng ngh·ªá hi·ªán ƒë·∫°i ƒë·ªÉ kh√¥ng ch·ªâ ƒë√°p ·ª©ng nhu c·∫ßu c∆° b·∫£n v·ªÅ d·ªØ li·ªáu, m√† c√≤n gi√∫p b·∫°n x√¢y d·ª±ng c√°c chi·∫øn l∆∞·ª£c giao d·ªãch th√¥ng minh v√† hi·ªáu qu·∫£.

‚ú® T√≠nh nƒÉng n·ªïi b·∫≠t
--------------------

üÜì **Ho√†n to√†n mi·ªÖn ph√≠ & m√£ ngu·ªìn m·ªü**\ : D·ªÖ d√†ng truy c·∫≠p v√† s·ª≠ d·ª•ng, ph√π h·ª£p v·ªõi nh√† ƒë·∫ßu t∆∞ c√° nh√¢n, nh√† ph√¢n t√≠ch ƒë·ªãnh l∆∞·ª£ng, v√† c·ªông ƒë·ªìng nghi√™n c·ª©u.

üêç **Gi·∫£i ph√°p Python to√†n di·ªán**\ : C√°c h√†m ch·ª©c nƒÉng th√¢n thi·ªán, d·ªÖ d√†ng t√≠ch h·ª£p ƒë·ªÉ x√¢y d·ª±ng c√°c h·ªá th·ªëng giao d·ªãch t·ª± ƒë·ªông.

üìä **D·ªØ li·ªáu Vi·ªát Nam chuy√™n s√¢u**\ : Bao g·ªìm c·ªï phi·∫øu, ch·ªâ s·ªë, ph√°i sinh, qu·ªπ m·ªü, d·ªØ li·ªáu qu·ªëc t·∫ø v·ªõi c·∫•u tr√∫c ph√≠ giao d·ªãch chu·∫©n Vi·ªát Nam.

üìà **C√¥ng c·ª• ph√¢n t√≠ch m·∫°nh m·∫Ω**\ : T√≠ch h·ª£p s·∫µn c√°c ch·ªâ s·ªë hi·ªáu su·∫•t, backtesting, v√† ƒë√°nh gi√° r·ªßi ro.

B·∫°n ch√≠nh l√† m·ªôt ph·∫ßn quan tr·ªçng trong h√†nh tr√¨nh chuy·ªÉn ƒë·ªïi s·ªë th·ªã tr∆∞·ªùng t√†i ch√≠nh Vi·ªát Nam. H√£y c√πng XNO t·∫°o n√™n nh·ªØng thay ƒë·ªïi t√≠ch c·ª±c v√† hi·ªáu qu·∫£!

Tham gia ngay c·ªông ƒë·ªìng XNO ƒë·ªÉ giao l∆∞u, chia s·∫ª kinh nghi·ªám v√† c·∫≠p nh·∫≠t nh·ªØng t√≠nh nƒÉng m·ªõi nh·∫•t:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

üåê **Website ch√≠nh th·ª©c**\ : `xno.vn <https://xno.vn>`_\ :raw-html-m2r:`<br>`
üë• **C·ªông ƒë·ªìng Quant Finance**\ : `xnoquant.vn <https://xnoquant.vn>`_

üöÄ T·∫°i sao ch·ªçn XNO API?
------------------------

XNO API gi√∫p r√∫t ng·∫Øn th·ªùi gian x·ª≠ l√Ω d·ªØ li·ªáu, h·ªó tr·ª£ h·ªçc t·∫≠p, nghi√™n c·ª©u v√† x√¢y d·ª±ng h·ªá th·ªëng ph√¢n t√≠ch giao d·ªãch ƒë·ªãnh l∆∞·ª£ng m·ªôt c√°ch hi·ªáu qu·∫£ ‚Äì kh√¥ng ch·ªâ l√† m·ªôt c√¥ng c·ª• tr√≠ch xu·∫•t d·ªØ li·ªáu, m√† l√† n·ªÅn t·∫£ng ƒë·ªÉ ph√°t tri·ªÉn gi·∫£i ph√°p ƒë·∫ßu t∆∞ th√¥ng minh c√° nh√¢n.

üîé Truy xu·∫•t d·ªØ li·ªáu to√†n di·ªán
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


* **C·ªï phi·∫øu Vi·ªát Nam**\ : D·ªØ li·ªáu l·ªãch s·ª≠, realtime, th√¥ng tin doanh nghi·ªáp
* **Ph√°i sinh**\ : VN30F1M, VN30F2M v·ªõi d·ªØ li·ªáu t·∫ßn su·∫•t cao
* **Qu·ªπ m·ªü**\ : Th√¥ng tin qu·ªπ, NAV, danh m·ª•c ƒë·∫ßu t∆∞
* **Th·ªã tr∆∞·ªùng qu·ªëc t·∫ø**\ : Ch·ªâ s·ªë th·∫ø gi·ªõi, forex, cryptocurrency
* **D·ªØ li·ªáu ƒë·ªãnh l∆∞·ª£ng**\ : OHLCV, order book, foreign trading

üìä D·ªØ li·ªáu th·ªã tr∆∞·ªùng ƒëa d·∫°ng
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

T·ª´ gi√° c·ªï phi·∫øu th·ªùi gian th·ª±c ƒë·∫øn d·ªØ li·ªáu b√°o c√°o t√†i ch√≠nh, t·ª´ ph√°i sinh VN30 ƒë·∫øn c√°c ch·ªâ s·ªë qu·ªëc t·∫ø nh∆∞ S&P 500, Nikkei 225.

üìà C√¥ng c·ª• ph√¢n t√≠ch hi·ªáu su·∫•t
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

T√≠ch h·ª£p s·∫µn c√°c ch·ªâ s·ªë Sharpe, Sortino, Max Drawdown, Win Rate, Value at Risk v√† nhi·ªÅu metrics quan tr·ªçng kh√°c.

üß™ Backtesting chuy√™n nghi·ªáp
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

H·ªó tr·ª£ backtest chi·∫øn l∆∞·ª£c v·ªõi c·∫•u tr√∫c ph√≠ giao d·ªãch chu·∫©n th·ªã tr∆∞·ªùng Vi·ªát Nam, t√≠nh to√°n PnL ch√≠nh x√°c, h·ªó tr·ª£ Take Profit/Stop Loss.

üñºÔ∏è T√≠ch h·ª£p visualization
^^^^^^^^^^^^^^^^^^^^^^^^^

D·ªÖ d√†ng m·ªü r·ªông ƒë·ªÉ t·∫°o c√°c bi·ªÉu ƒë·ªì v√† b√°o c√°o tr·ª±c quan cho chi·∫øn l∆∞·ª£c giao d·ªãch.

üì¶ C√†i ƒë·∫∑t
----------

B·∫°n c√≥ th·ªÉ c√†i ƒë·∫∑t th∆∞ vi·ªán b·∫£n ph√°t h√†nh ·ªïn ƒë·ªãnh qua PyPI v·ªõi c√¢u l·ªánh sau:

.. code-block:: bash

   pip install xnoapi

Ho·∫∑c c√†i ƒë·∫∑t t·ª´ m√£ ngu·ªìn GitHub:

.. code-block:: bash

   git clone https://github.com/xnoproject/xnoapi.git
   pip install ./xnoapi

B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng
---------------

B·∫°n c·∫ßn n·∫°p th∆∞ vi·ªán v√†o m√¥i tr∆∞·ªùng Python v√† kh·ªüi t·∫°o API key:

.. code-block:: python

   from xnoapi import client
   from xnoapi.vn.data import stocks, derivatives
   from xnoapi.vn.metrics import Metrics, Backtest_Derivates

   # Kh·ªüi t·∫°o client v·ªõi API key
   client(apikey="your_api_key")

üìö T√†i li·ªáu h∆∞·ªõng d·∫´n
---------------------

üìñ **T√†i li·ªáu tr·ª±c tuy·∫øn**\ : https://xnoapi.readthedocs.io\ :raw-html-m2r:`<br>`
üìÑ **Phi√™n b·∫£n PDF**\ : T·∫£i xu·ªëng\ :raw-html-m2r:`<br>`
üéØ **H∆∞·ªõng d·∫´n chi ti·∫øt**\ : `xno.vn/docs <https://xno.vn/docs>`_\ :raw-html-m2r:`<br>`
üí¨ **H·ªó tr·ª£ c·ªông ƒë·ªìng**\ : `xnoquant.vn <https://xnoquant.vn>`_

üéØ V√≠ d·ª• s·ª≠ d·ª•ng c∆° b·∫£n
-----------------------

Truy xu·∫•t d·ªØ li·ªáu c·ªï phi·∫øu v√† ph√°i sinh Vi·ªát Nam
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

   from xnoapi.vn.data.utils import client
   from xnoapi.vn.data import stocks, derivatives
   from xnoapi.vn.data.quant_data import get_indices

   # Kh·ªüi t·∫°o client
   client(apikey="your_api_key")

   # Danh s√°ch c·ªï phi·∫øu c√≥ t√≠nh thanh kho·∫£n cao
   liquid_stocks = stocks.list_liquid_asset()
   print("C·ªï phi·∫øu thanh kho·∫£n cao:", liquid_stocks)

   # D·ªØ li·ªáu l·ªãch s·ª≠ c·ªï phi·∫øu VIC (Vingroup)
   vic_data = stocks.get_hist("VIC")
   print("D·ªØ li·ªáu VIC:")
   print(vic_data.head())

   # D·ªØ li·ªáu ph√°i sinh VN30F1M theo khung th·ªùi gian 1 ph√∫t
   vn30f1m_data = derivatives.get_hist("VN30F1M", "1m")
   print("D·ªØ li·ªáu VN30F1M:")
   print(vn30f1m_data.head())

.. code-block:: output

   C·ªï phi·∫øu thanh kho·∫£n cao:        0             1
   0    SHS  3.885972e+10
   1    CEO  3.227357e+10
   2    PVS  1.849527e+10
   3    MBS  1.431323e+10
   4    IDC  7.032716e+09
   ..   ...           ...
   145  ITQ  7.207067e+07
   146  ANT  7.107417e+07
   147  PFL  6.960543e+07
   148  KCB  6.549169e+07
   149  VHE  6.431393e+07

   [150 rows x 2 columns]
   D·ªØ li·ªáu VIC:
            Date      time  Open  High   Low  Close    volume
   0  2022-08-23  09:00:00  65.5  65.6  65.0   65.2  300000.0
   1  2022-08-23  10:00:00  65.2  65.2  65.0   65.0  216000.0
   2  2022-08-23  11:00:00  65.0  65.2  65.0   65.0  164700.0
   3  2022-08-23  13:00:00  65.0  65.1  64.8   64.8  328600.0
   4  2022-08-23  14:00:00  64.9  65.2  64.8   65.0  428500.0
   D·ªØ li·ªáu VN30F1M:
            Date      time   Open   High    Low  Close  volume
   0  2018-08-13  09:01:00  943.0  943.1  942.9  943.1   220.0
   1  2018-08-13  09:02:00  943.0  943.6  943.0  943.5   121.0
   2  2018-08-13  09:03:00  943.3  943.4  943.3  943.4   135.0
   3  2018-08-13  09:04:00  943.2  943.2  943.0  943.1   361.0
   4  2018-08-13  09:05:00  943.1  943.1  942.9  943.0   343.0

üß† C·∫•u tr√∫c th∆∞ vi·ªán
--------------------

üìä D·ªØ li·ªáu t√†i ch√≠nh
^^^^^^^^^^^^^^^^^^^^

``xnoapi.vn.data.stocks``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


* ``list_liquid_asset()``\ : Danh s√°ch c·ªï phi·∫øu c√≥ t√≠nh thanh kho·∫£n cao tr√™n th·ªã tr∆∞·ªùng Vi·ªát Nam
  .. code-block:: python

     liquid_stocks = stocks.list_liquid_asset()

* ``get_hist(asset)``\ : D·ªØ li·ªáu OHLCV l·ªãch s·ª≠ c·ªßa c·ªï phi·∫øu
  .. code-block:: python

     vic_data = stocks.get_hist("VIC")
     print("D·ªØ li·ªáu VIC:")
     print(vic_data.head())

``xnoapi.vn.data.derivatives``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


* 
  ``get_hist(asset, frequency)``\ : D·ªØ li·ªáu th·ªã tr∆∞·ªùng ph√°i sinh (VN30F1M, VN30F2M)

* 
  H·ªó tr·ª£ c√°c frequency: "1m", "5m", "15m", "30m", "1H", "1D"

  .. code-block:: python

     # D·ªØ li·ªáu ph√°i sinh VN30F1M theo khung th·ªùi gian 1 ph√∫t
     vn30f1m_data = derivatives.get_hist("VN30F1M", "1m")
     print("D·ªØ li·ªáu VN30F1M:")
     print(vn30f1m_data.head())

``xnoapi.vn.data.quant_data`` [M·ªöI]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Module d·ªØ li·ªáu ƒë·ªãnh l∆∞·ª£ng chuy√™n s√¢u v·ªõi API v2:


* ``ping()``\ : Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn d·ªãch v·ª•
  .. code-block:: python

     print("\nPing quant-data:", xnoapi.vn.data.ping())

* ``get_indices()``\ : Danh s√°ch c√°c ch·ªâ s·ªë th·ªã tr∆∞·ªùng
  .. code-block:: python

     print("\nDanh s√°ch ch·ªâ s·ªë th·ªã tr∆∞·ªùng:", xnoapi.vn.data.get_indices())

* ``get_market_index_snapshot(index_symbol)``\ : Snapshot ch·ªâ s·ªë (VNI, HNX-Index, v.v.)
  .. code-block:: python

     print("\nget_market_index_snapshot('VNINDEX'):")
     xnoapi.vn.data.get_market_index_snapshot("VNINDEX")

* ``get_stock_info(symbol)``\ : Th√¥ng tin c·ªï phi·∫øu realtime
  .. code-block:: python

     print("\nget_stock_info('HPG'):")
     xnoapi.vn.data.get_stock_info("HPG")

* ``get_stock_matches(symbol)``\ : D·ªØ li·ªáu kh·ªõp l·ªánh g·∫ßn nh·∫•t
  .. code-block:: python

     print("\nget_stock_matches('HPG'):")
     xnoapi.vn.data.get_stock_matches("HPG")

* ``get_stock_foreign_trading(symbol)``\ : Giao d·ªãch kh·ªëi ngo·∫°i
  .. code-block:: python

     print("\nget_stock_foreign_trading('HPG'):")
     xnoapi.vn.data.get_stock_foreign_trading("HPG")

* ``get_stock_top_price(symbol)``\ : Order book snapshot
  .. code-block::

     xnoapi.vn.data.get_stock_top_price('HPG')

``xnoapi.vn.data.quote_market``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


* ``Quote(symbol).history(start, end, interval)``\ : D·ªØ li·ªáu l·ªãch s·ª≠
  .. code-block:: python

     q = xnoapi.vn.data.Quote("ACB")
     q.history(start="2024-01-01", end="2024-03-31", interval="1D")

* ``Quote(symbol).intraday(page_size, last_time)``\ : D·ªØ li·ªáu tick intraday
  .. code-block:: python

     q = xnoapi.vn.data.Quote("ACB")
     q.intraday(page_size = 200)

* ``Quote(symbol).price_depth()``\ : ƒê·ªô s√¢u gi√° (accumulated volume)
  .. code-block:: python

     q = xnoapi.vn.data.Quote("ACB")
     q.price_depth()

``xnoapi.vn.data.company`` (Th√¥ng tin doanh nghi·ªáp)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


* ``Company(symbol).overview()``\ : T·ªïng quan c√¥ng ty
  .. code-block:: python

     c = xnoapi.vn.data.Company("ACB")
     print("\nACB.Company.overview:")
     c.overview()

* ``Company(symbol).profile()``\ : Th√¥ng tin chi ti·∫øt
  .. code-block:: python

     c = xnoapi.vn.data.Company("HPG")
     print("\HPG.Company.profile:")
     c.profile()

* ``Company(symbol).shareholders()``\ : C·ªï ƒë√¥ng
  .. code-block:: python

     c = xnoapi.vn.data.Company("VCI")
     print("\nVCI.Company.shareholders:")
     c.shareholders()

* ``Company(symbol).officers()``\ : Ban l√£nh ƒë·∫°o
  .. code-block:: python

     c = xnoapi.vn.data.Company("VNM")
     print("\nVNM.Company.officers:")
     c.officers()

* ``Company(symbol).subsidiaries()``\ : C√¥ng ty con
  .. code-block:: python

     c = xnoapi.vn.data.Company("VIC")
     print("\nVIC.Company.subsidiaries:")
     c.subsidiaries()

* ``Company(symbol).events()``\ : S·ª± ki·ªán quan tr·ªçng
  .. code-block:: python

     c = xnoapi.vn.data.Company("VCB")
     print("\nVCB.Company.events:")
     c.events()

* ``Company(symbol).news()``\ : Tin t·ª©c ho·∫°t ƒë·ªông
  .. code-block:: python

     c = xnoapi.vn.data.Company("FPT")
     print("\nFPT.Company.news:")
     c.news()

* ``Company(symbol).ratio_summary()``\ : T·ª∑ s·ªë t√†i ch√≠nh
  .. code-block:: python

     c = xnoapi.vn.data.Company("TPB")
     print("\nTPB.Company.ratio_summary:")
     c.ratio_summary()

``xnoapi.vn.data.finance`` (B√°o c√°o t√†i ch√≠nh)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


* ``Finance(symbol).income_statement(period='year')``\ : B√°o c√°o k·∫øt qu·∫£ kinh doanh
  .. code-block:: python

     f = xnoapi.vn.data.Finance("ACB")
     print("\nACB.Finance.income_statement(year):")
     f.income_statement(period="year")

* ``Finance(symbol).balance_sheet(period='year')``\ : B·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n
  .. code-block:: python

     f = xnoapi.vn.data.Finance("HPG")
     print("\nACB.Finance.balance_sheet(year):")
     f.balance_sheet(period="year")

* ``Finance(symbol).cash_flow(period='year')``\ : B√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá
  .. code-block:: python

     f = xnoapi.vn.data.Finance("VNM")
     print("\nACB.Finance.cash_flow(year):")
     f.cash_flow(period="year")

``xnoapi.vn.data.fund`` [M·ªöI] (Qu·ªπ m·ªü)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


* ``Fund().listing(fund_type="")``\ : Danh s√°ch qu·ªπ m·ªü (BALANCED, BOND, STOCK)
  .. code-block:: python

     fund = xnoapi.vn.data.Fund()
     print("\nFmarket.Fund.listing(fund_type='STOCK'):")
     df_funds = fund.listing(fund_type="STOCK")
     df_funds

* ``Fund().filter(q)``\ : T√¨m ki·∫øm qu·ªπ theo t√™n
  .. code-block:: python

     fund = xnoapi.vn.data.Fund()
     fund.filter('RVPIF')

``xnoapi.vn.data.quote_global``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


* ``Global().fx(symbol).quote.history(start, end)``\ : T·ª∑ gi√° ngo·∫°i t·ªá (USDVND, EURUSD)
  .. code-block:: python

     Global = xnoapi.vn.data.Global()
     print("\nGlobal.FX USDVND:")
     Global.fx("USDVND").quote.history(start="2024-01-01", end="2024-12-31")

* ``Global().crypto(symbol).quote.history(start, end)``\ : Cryptocurrency (BTC, ETH)
  .. code-block:: python

     Global = xnoapi.vn.data.Global()
     print("\nGlobal.BTCUSD:")
     Global.crypto("BTCUSD").quote.history(start="2024-01-01", end="2024-12-31")

* ``Global().world_index(symbol).quote.history(start, end)``\ : Ch·ªâ s·ªë qu·ªëc t·∫ø (DJI, SPX, N225)
  .. code-block:: python

     Global = xnoapi.vn.data.Global()
     print("\nGlobal.BTCUSD:")
     Global.world_index("DJI").quote.history(start="2024-01-01", end="2024-12-31")

``xnoapi.vn.data.trading`` (Price Board)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


* ``Trading.price_board(symbols)``\ : B·∫£ng gi√° realtime v·ªõi th√¥ng tin foreign, ceiling/floor
  .. code-block:: python

     xnoapi.vn.data.Trading.price_board(["VCB","ACB","TCB"])

üìà Ph√¢n t√≠ch & ƒë√°nh gi√° hi·ªáu su·∫•t
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``xnoapi.vn.metrics.Metrics``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Bao g·ªìm c√°c ch·ªâ s·ªë quan tr·ªçng:


* **Sharpe Ratio**\ : ƒê√°nh gi√° hi·ªáu su·∫•t ƒëi·ªÅu ch·ªânh theo r·ªßi ro
* **Sortino Ratio**\ : T·∫≠p trung v√†o downside risk
* **Calmar Ratio**\ : Annual Return / Max Drawdown
* **Max Drawdown**\ : M·ª©c thua l·ªó t·ªëi ƒëa
* **Average Gain/Loss**\ : L√£i/l·ªó trung b√¨nh
* **Win Rate**\ : T·ª∑ l·ªá giao d·ªãch th√†nh c√¥ng
* **Profit Factor**\ : T·ªïng l√£i / T·ªïng l·ªó
* **Value at Risk (VaR)**\ : R·ªßi ro t·∫°i m·ª©c tin c·∫≠y nh·∫•t ƒë·ªãnh
* **Risk of Ruin**\ : X√°c su·∫•t ph√° s·∫£n

``xnoapi.vn.metrics.Backtest_Derivates``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


* Logic backtesting cho chi·∫øn l∆∞·ª£c giao d·ªãch ph√°i sinh
* H·ªó tr·ª£ m√¥ h√¨nh ph√≠ giao d·ªãch chu·∫©n Vi·ªát Nam (transaction fee + overnight fee)
* T√≠nh to√°n PnL th√¥ v√† sau ph√≠
* ∆Ø·ªõc t√≠nh v·ªën t·ªëi thi·ªÉu c·∫ßn thi·∫øt

``xnoapi.metrics.TradingBacktest`` [N√ÇNG C·∫§P]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

L·ªõp backtesting ƒëa nƒÉng v·ªõi c√°c t√≠nh nƒÉng m·ªõi:


* **Take Profit/Stop Loss**\ : ``apply_tp_sl(df, tp_percentage, sl_percentage)``
* **Trailing Stop Loss**\ : ``apply_tp_sl_trailing(df, tp_percentage, sl_percentage)``
* **Metrics t·ªïng h·ª£p**\ : Sharpe, Sortino, Calmar, Max Drawdown, Win Rate, Profit Factor, Risk of Ruin
* **Flexible PnL**\ : H·ªó tr·ª£ raw v√† after-fees PnL calculation

üß™ V√≠ d·ª• th·ª±c h√†nh
------------------

1. Ph√¢n t√≠ch d·ªØ li·ªáu ƒë·ªãnh l∆∞·ª£ng v·ªõi API v2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

   from xnoapi.vn.data.quant_data import *
   import datetime as dt

   # Ki·ªÉm tra k·∫øt n·ªëi
   if ping():
       print("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!")

   # L·∫•y danh s√°ch ch·ªâ s·ªë
   indices = get_indices()
   print("C√°c ch·ªâ s·ªë c√≥ s·∫µn:", indices)

   # Snapshot VNINDEX
   vni_snapshot = get_market_index_snapshot("VNINDEX")
   print("VNINDEX hi·ªán t·∫°i:", vni_snapshot)

   # Th√¥ng tin giao d·ªãch kh·ªëi ngo·∫°i
   foreign_data = get_stock_foreign_trading("VIC")
   print("Foreign trading VIC:", foreign_data)

.. code-block:: output

   ‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!
   C√°c ch·ªâ s·ªë c√≥ s·∫µn:            symbol           name
   0             HNX            HNX
   1           HNX30          HNX30
   2           HNX30          HNX30
   3        HNXIndex       HNXINDEX
   4   HNXUpcomIndex  HNXUPCOMINDEX
   5           UPCOM          UPCOM
   6           VN100          VN100
   7            VN30           VN30
   8            VN30           VN30
   9      VNALLSHARE     VNALLSHARE
   10         VNCOND         VNCOND
   11         VNCONS         VNCONS
   12      VNDIAMOND      VNDIAMOND
   13          VNENE          VNENE
   14          VNFIN          VNFIN
   15      VNFINLEAD      VNFINLEAD
   16    VNFINSELECT    VNFINSELECT
   17         VNHEAL         VNHEAL
   18          VNIND          VNIND
   19        VNINDEX        VNINDEX
   20        VNINDEX        VNINDEX
   21           VNIT           VNIT
   22          VNMAT          VNMAT
   23       VNMIDCAP       VNMIDCAP
   24         VNREAL         VNREAL
   25           VNSI           VNSI
   26     VNSMALLCAP     VNSMALLCAP
   27          VNUTI          VNUTI
   28          VNX50          VNX50
   29    VNXALLSHARE    VNXALLSHARE
   30    VNXALLSHARE    VNXALLSHARE
   VNINDEX hi·ªán t·∫°i:                    time   symbol     name  prior        value   total_vol  \
   0  2025-08-22T14:45:15Z  VNINDEX  VNINDEX   1688  1645.469971  2234243072

         total_val  advance  decline  nochange  ceil  floor     change  \
   0  6.067808e+12       71      251        27     0      0 -42.529999

      change_pct
   0       -2.52
   Foreign trading VIC:                    time symbol  total_room  current_room  buy_vol  sell_vol  \
   0  2025-08-22T14:59:31Z    VIC   186240000     171226000    57880     76800

          buy_val     sell_val
   0  71619900000  95238300000

2. ƒê√°nh gi√° chi·∫øn l∆∞·ª£c giao d·ªãch v·ªõi Metrics n√¢ng cao
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

   from xnoapi.vn.metrics import Metrics, Backtest_Derivates
   from xnoapi.vn.data import derivatives
   from xnoapi.metrics import TradingBacktest
   import numpy as np

   # T·∫°o t√≠n hi·ªáu giao d·ªãch: chi·∫øn l∆∞·ª£c RSI ƒë∆°n gi·∫£n
   def gen_position_rsi(df, period=14, oversold=30, overbought=70):
       """
       Chi·∫øn l∆∞·ª£c RSI: Long khi RSI < oversold, Short khi RSI > overbought
       """
       delta = df["Close"].diff()
       gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
       loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
       rs = gain / loss
       rsi = 100 - (100 / (1 + rs))

       position = np.where(rsi < oversold, 1,  # Long signal
                          np.where(rsi > overbought, -1, 0))  # Short signal

       return df.assign(position=position, rsi=rsi)

   # L·∫•y d·ªØ li·ªáu v√† t·∫°o t√≠n hi·ªáu
   print("üì• ƒêang t·∫£i d·ªØ li·ªáu VN30F1M...")
   df = derivatives.get_hist("VN30F1M", "5m")  # 5 ph√∫t cho ph√¢n t√≠ch chi ti·∫øt
   df_pos = gen_position_rsi(df)

   # √Åp d·ª•ng Take Profit/Stop Loss
   backtester = TradingBacktest(df_pos)
   df_pos_with_tpsl = backtester.apply_tp_sl(df_pos, tp_percentage=2.0, sl_percentage=1.5)
   df_pos["position_tpsl"] = df_pos_with_tpsl

   for col in df_pos.columns:
       df_pos[col.lower()] = df_pos[col]
   df_pos["Date"] = df_pos["Date"].astype(str)
   df_pos["time"] = df_pos["time"].astype(str)

   df_pos['datetime'] = pd.to_datetime(df_pos['date'].astype(str + " " + df_pos['time']))
   df_pos = df_pos.set_index('datetime')

   # So s√°nh chi·∫øn l∆∞·ª£c g·ªëc v√† c√≥ TP/SL
   backtest_original = Backtest_Derivates(df_pos, pnl_type="raw")
   backtest_tpsl = Backtest_Derivates(df_pos.assign(position=df_pos["position_tpsl"]), pnl_type="raw")

   metrics_original = Metrics(backtest_original)
   metrics_tpsl = Metrics(backtest_tpsl)

   # So s√°nh k·∫øt qu·∫£
   print("\nüìä SO S√ÅNH CHI·∫æN L∆Ø·ª¢C:")
   print("=" * 60)
   print(f"{'Metric':<20} {'Original':<15} {'With TP/SL':<15} {'Improvement':<15}")
   print("=" * 60)

   sharpe_orig = metrics_original.sharpe()
   sharpe_tpsl = metrics_tpsl.sharpe()
   print(f"{'Sharpe Ratio':<20} {sharpe_orig:<15.3f} {sharpe_tpsl:<15.3f} {((sharpe_tpsl/sharpe_orig-1)*100 if sharpe_orig != 0 else 0):<14.1f}%")

   win_rate_orig = metrics_original.win_rate()
   win_rate_tpsl = metrics_tpsl.win_rate()
   print(f"{'Win Rate':<20} {win_rate_orig*100:<15.1f}% {win_rate_tpsl*100:<15.1f}% {(win_rate_tpsl-win_rate_orig)*100:<14.1f}pp")

   max_dd_orig = metrics_original.max_drawdown()
   max_dd_tpsl = metrics_tpsl.max_drawdown()
   print(f"{'Max Drawdown':<20} {max_dd_orig*100:<15.1f}% {max_dd_tpsl*100:<15.1f}% {(max_dd_tpsl-max_dd_orig)*100:<14.1f}pp")

   profit_factor_orig = metrics_original.profit_factor()
   profit_factor_tpsl = metrics_tpsl.profit_factor()
   print(f"{'Profit Factor':<20} {profit_factor_orig:<15.3f} {profit_factor_tpsl:<15.3f} {((profit_factor_tpsl/profit_factor_orig-1)*100 if profit_factor_orig != 0 else 0):<14.1f}%")

.. code-block:: output


   üìä SO S√ÅNH CHI·∫æN L∆Ø·ª¢C:
   ============================================================
   Metric               Original        With TP/SL      Improvement
   ============================================================
   Sharpe Ratio         -2.076          -1.992          -4.0          %
   Win Rate             50.6           % 50.9           % 0.3           pp
   Max Drawdown         -54.4          % -52.1          % 2.3           pp
   Profit Factor        0.644           0.660           2.5           %

3. Ph√¢n t√≠ch qu·ªπ m·ªü v√† th·ªã tr∆∞·ªùng qu·ªëc t·∫ø
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

   from xnoapi.vn.data.fund import Fund
   from xnoapi.vn.data.quote_global import Global
   import datetime as dt

   # Ph√¢n t√≠ch qu·ªπ m·ªü
   fund = Fund()

   # T√¨m qu·ªπ c·ªï phi·∫øu
   stock_funds = fund.listing(fund_type="STOCK")
   print("Top 5 qu·ªπ c·ªï phi·∫øu:")
   print(stock_funds[["name", "code", "nav", "productNavChange.navTo1Months"]].head())

   # Ph√¢n t√≠ch danh m·ª•c c·ªßa m·ªôt qu·ªπ c·ª• th·ªÉ
   if not stock_funds.empty:
       fund_code = stock_funds.iloc[0]["code"]
       holdings = Fund.details.top_holding(fund_code)
       print(f"\nDanh m·ª•c top holdings c·ªßa {fund_code}:")
       print(holdings.head())

   # D·ªØ li·ªáu th·ªã tr∆∞·ªùng qu·ªëc t·∫ø
   glb= Global()

   # So s√°nh VNINDEX v·ªõi c√°c ch·ªâ s·ªë qu·ªëc t·∫ø
   start_date = "2024-01-01"
   end_date = "2024-12-31"

   vni_data = glb.world_index("VNI").quote.history(start_date, end_date)
   spy_data = glb.world_index("INX").quote.history(start_date, end_date)  # S&P 500
   nikkei_data = glb.world_index("N225").quote.history(start_date, end_date)

   print("\nSo s√°nh hi·ªáu su·∫•t ch·ªâ s·ªë 2024:")
   print("=" * 40)

   def calculate_return(df):
       if df.empty or df["close"].isna().all():
           return 0
       return (df["close"].iloc[-1] / df["close"].iloc[0] - 1) * 100

   vni_return = calculate_return(vni_data)
   spy_return = calculate_return(spy_data)
   nikkei_return = calculate_return(nikkei_data)

   print(f"VNINDEX: {vni_return:.2f}%")
   print(f"S&P 500: {spy_return:.2f}%")
   print(f"Nikkei 225: {nikkei_return:.2f}%")

   # T·ª∑ gi√° USD/VND
   usd_vnd = glb.fx("USDVND").quote.history(start_date, end_date)
   if not usd_vnd.empty:
       usd_change = calculate_return(usd_vnd)
       print(f"USD/VND: {usd_change:.2f}%")

.. code-block:: output

   Top 5 qu·ªπ c·ªï phi·∫øu:
                                                   name    code        nav  \
   0             QU·ª∏ ƒê·∫¶U T∆Ø C·ªî PHI·∫æU NƒÇNG ƒê·ªòNG B·∫¢O VI·ªÜT   BVFED   31828.00
   1                QU·ª∏ ƒê·∫¶U T∆Ø CH·ª®NG KHO√ÅN NƒÇNG ƒê·ªòNG DC  VFMVF1  108787.18
   2  QU·ª∏ ƒê·∫¶U T∆Ø C·ªî PHI·∫æU TƒÇNG TR∆Ø·ªûNG MIRAE ASSET VI...   MAGEF   21435.98
   3            QU·ª∏ ƒê·∫¶U T∆Ø C·ªî PHI·∫æU T·∫¨P TRUNG C·ªî T·ª®C DC  VFMVF4   34008.33
   4                  QU·ª∏ ƒê·∫¶U T∆Ø TƒÇNG TR∆Ø·ªûNG TH√ÄNH C√îNG    TCGF   12862.16

      productNavChange.navTo1Months
   0                          17.14
   1                          13.97
   2                          13.38
   3                          12.34
   4                          12.38

   So s√°nh hi·ªáu su·∫•t ch·ªâ s·ªë 2024:
   ========================================
   VNINDEX: 0.00%
   S&P 500: 6.04%
   Nikkei 225: 4.41%
   USD/VND: 2.19%

4. Ph√¢n t√≠ch b√°o c√°o t√†i ch√≠nh v√† th√¥ng tin doanh nghi·ªáp
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

   from xnoapi.vn.data.company import Company
   from xnoapi.vn.data.finance import Finance

   # Ph√¢n t√≠ch VIC - Vingroup
   symbol = "VIC"
   company = Company(symbol)
   finance = Finance(symbol)

   # Th√¥ng tin t·ªïng quan
   overview = company.overview()
   print("Th√¥ng tin t·ªïng quan VIC:")
   print(overview[["ticker", "exchange", "industry", "stockRating"]].iloc[0])

   # C·ªï ƒë√¥ng l·ªõn
   shareholders = company.shareholders()
   print("\nTop 5 c·ªï ƒë√¥ng l·ªõn:")
   print(shareholders[["name", "ownPercent"]].head())

   # B√°o c√°o t√†i ch√≠nh
   income_stmt = finance.income_statement(period='quarter')  # B√°o c√°o qu√Ω
   print("\nDoanh thu 4 qu√Ω g·∫ßn nh·∫•t:")
   print(income_stmt[["quarter", "revenue", "investProfit"]].head())

   # T·ª∑ s·ªë t√†i ch√≠nh
   ratios = company.ratio_summary()
   print("\nC√°c t·ª∑ s·ªë t√†i ch√≠nh ch√≠nh:")
   if not ratios.empty:
       key_ratios = ["pe", "pb", "roe", "roa", "eps"]
       available_ratios = [col for col in key_ratios if col in ratios.columns]
       if available_ratios:
           print(ratios[available_ratios].iloc[0])

.. code-block:: output

   Th√¥ng tin t·ªïng quan VIC:
   ticker                  VIC
   exchange               HOSE
   industry       B·∫•t ƒë·ªông s·∫£n
   stockRating             2.7
   Name: 0, dtype: object

   Top 5 c·ªï ƒë√¥ng l·ªõn:
                                                   name  ownPercent
   0           C√¥ng ty C·ªï Ph·∫ßn T·∫≠p ƒêo√†n ƒê·∫ßu T∆∞ Vi·ªát Nam      0.3249
   1                                    Ph·∫°m Nh·∫≠t V∆∞·ª£ng      0.1160
   2  C√¥ng Ty C·ªï Ph·∫ßn Qu·∫£n L√Ω V√† ƒê·∫ßu T∆∞ B·∫•t ƒê·ªông S·∫£n...      0.0628
   3                                     Ph·∫°m Thu H∆∞∆°ng      0.0440
   4                                     Ph·∫°m Th√∫y H·∫±ng      0.0299

   Doanh thu 4 qu√Ω g·∫ßn nh·∫•t:
      quarter  revenue investProfit
   0        5   189068         None
   1        5   161428         None
   2        5   101794         None
   3        5   125688         None
   4        5   110490         None

   C√°c t·ª∑ s·ªë t√†i ch√≠nh ch√≠nh:
   roe    0.095
   roa    0.016
   Name: 0, dtype: float64

üÜï T√≠nh nƒÉng m·ªõi
----------------

üìä Quant Data API v2
^^^^^^^^^^^^^^^^^^^^


* D·ªØ li·ªáu OHLCV v·ªõi timestamp ch√≠nh x√°c ƒë·∫øn gi√¢y
* Order book snapshot realtime
* Foreign trading data
* Market index snapshot

üè¶ Qu·ªπ m·ªü & T√†i s·∫£n qu·ªëc t·∫ø
^^^^^^^^^^^^^^^^^^^^^^^^^^^


* Th√¥ng tin qu·ªπ m·ªü ƒë·∫ßy ƒë·ªß (c·ªï phi·∫øu, tr√°i phi·∫øu, c√¢n b·∫±ng)
* Danh m·ª•c ƒë·∫ßu t∆∞ v√† ph√¢n b·ªï t√†i s·∫£n c·ªßa qu·ªπ
* D·ªØ li·ªáu forex, cryptocurrency, ch·ªâ s·ªë qu·ªëc t·∫ø

üéØ Take Profit/Stop Loss n√¢ng cao
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


* Fixed TP/SL v·ªõi hold mechanism
* Trailing Stop Loss ƒë·ªông
* Backtesting v·ªõi risk management t·ª± ƒë·ªông

üìà Metrics m·ªü r·ªông
^^^^^^^^^^^^^^^^^^


* Risk of Ruin calculation
* Value at Risk (VaR)
* Calmar Ratio
* Enhanced Sortino Ratio

üè¢ Th√¥ng tin doanh nghi·ªáp chi ti·∫øt
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


* B√°o c√°o t√†i ch√≠nh theo qu√Ω/nƒÉm
* Th√¥ng tin c·ªï ƒë√¥ng, ban l√£nh ƒë·∫°o
* Tin t·ª©c v√† s·ª± ki·ªán quan tr·ªçng
* T·ª∑ s·ªë t√†i ch√≠nh t·ªïng h·ª£p

üåü C·ªông ƒë·ªìng & H·ªó tr·ª£
---------------------

XNO ph√°t tri·ªÉn nh·ªù s·ª± chung tay c·ªßa c·ªông ƒë·ªìng nh·ªØng ng∆∞·ªùi y√™u th√≠ch c√¥ng ngh·ªá v√† t√†i ch√≠nh ƒë·ªãnh l∆∞·ª£ng. M·ªói d√≤ng code, m·ªói b·∫£n s·ª≠a l·ªói ƒë·ªÅu l√† minh ch·ª©ng cho s·ª± ƒë√≥ng g√≥p qu√Ω gi√° c·ªßa c√°c b·∫°n.

üí¨ Tham gia c·ªông ƒë·ªìng
^^^^^^^^^^^^^^^^^^^^^

üåê **Website ch√≠nh th·ª©c**\ : `xno.vn <https://xno.vn>`_ - Tin t·ª©c, blog, v√† t√†i nguy√™n\ :raw-html-m2r:`<br>`
üë• **C·ªông ƒë·ªìng Quant**\ : `xnoquant.vn <https://xnoquant.vn>`_ - Th·∫£o lu·∫≠n, chia s·∫ª chi·∫øn l∆∞·ª£c\ :raw-html-m2r:`<br>`
üìß **H·ªó tr·ª£**\ : support@xno.vn\ :raw-html-m2r:`<br>`
üêõ **B√°o l·ªói**\ : GitHub Issues

ü§ù ƒê√≥ng g√≥p
^^^^^^^^^^^

Ch√∫ng t√¥i hoan ngh√™nh m·ªçi ƒë√≥ng g√≥p t·ª´ c·ªông ƒë·ªìng! B·∫°n c√≥ th·ªÉ:


* üåü Star d·ª± √°n tr√™n GitHub
* üêõ B√°o c√°o l·ªói ho·∫∑c ƒë·ªÅ xu·∫•t t√≠nh nƒÉng
* üìñ C·∫£i thi·ªán t√†i li·ªáu
* üíª ƒê√≥ng g√≥p code

‚ö†Ô∏è Tuy√™n b·ªë mi·ªÖn tr√°ch nhi·ªám
----------------------------

XNO API ƒë∆∞·ª£c ph√°t tri·ªÉn nh·∫±m ph·ª•c v·ª• m·ª•c ƒë√≠ch nghi√™n c·ª©u v√† s·ª≠ d·ª•ng c√° nh√¢n. D·ªØ li·ªáu cung c·∫•p c√≥ th·ªÉ kh√¥ng ƒë·∫ßy ƒë·ªß, kh√¥ng li√™n t·ª•c ho·∫∑c sai l·ªách so v·ªõi th·ª±c t·∫ø, do ƒë√≥ kh√¥ng khuy·∫øn ngh·ªã s·ª≠ d·ª•ng cho m·ª•c ƒë√≠ch giao d·ªãch th·ª±c t·∫ø, thu·∫≠t to√°n ƒë·∫ßu t∆∞, ho·∫∑c ra quy·∫øt ƒë·ªãnh t√†i ch√≠nh khi b·∫°n kh√¥ng hi·ªÉu r√µ.

C√°c t√°c gi·∫£ kh√¥ng ch·ªãu tr√°ch nhi·ªám ƒë·ªëi v·ªõi b·∫•t k·ª≥ t·ªïn th·∫•t hay thi·ªát h·∫°i n√†o ph√°t sinh t·ª´ vi·ªác s·ª≠ d·ª•ng d·ªØ li·ªáu ho·∫∑c m√£ ngu·ªìn n√†y, bao g·ªìm nh∆∞ng kh√¥ng gi·ªõi h·∫°n: sai l·ªách d·ªØ li·ªáu, m·∫•t m√°t t√†i ch√≠nh, ho·∫∑c s·ª≠ d·ª•ng sai m·ª•c ƒë√≠ch.

XNO API kh√¥ng cung c·∫•p t∆∞ v·∫•n ƒë·∫ßu t∆∞ hay t√≠n hi·ªáu giao d·ªãch. Ng∆∞·ªùi d√πng ho√†n to√†n t·ª± ch·ªãu tr√°ch nhi·ªám khi s·ª≠ d·ª•ng th∆∞ vi·ªán.

üìÑ Gi·∫•y ph√©p
------------

XNO API ƒë∆∞·ª£c ph√°t h√†nh theo **Gi·∫•y ph√©p MIT**. Xem chi ti·∫øt t·∫°i `LICENSE <https://github.com/xnoproject/xnoapi/blob/main/LICENSE>`_.
